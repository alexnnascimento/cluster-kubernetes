---
- name: Instalar e configurar o ContainerD
  hosts: all
  tasks:
    - name: Instalação dos módulos do Kernel Linux
      become: true
      ansible.builtin.copy:
        src: ./k8s.conf
        dest: /etc/modules-load.d/k8s.conf
        mode: '644'
      when: ansible_virtualization_type != "docker"    
      
    - name: Adicionando o overlay
      become: true
      community.general.modprobe:
        name: overlay
        state: present
      when: ansible_virtualization_type != "docker"   

    - name: Adicionando o br_netfilter
      become: true
      community.general.modprobe:
        name: br_netfilter
        state: present
      when: ansible_virtualization_type != "docker"     
  
    - name: Configuração dos parâmetros do sysctl
      become: true
      ansible.builtin.copy:
        src: ./k8s-cri.conf
        dest: /etc/sysctl.d/k8s.conf
        mode: '644'
      when: ansible_virtualization_type != "docker"   

    - name: Executando o comando sysctl para implementar as configurações
      become: true
      ansible.builtin.command: "sysctl --system"
      when: ansible_virtualization_type != "docker"   

    - name: Disable swap for current session
      become: true
      ansible.builtin.command: swapoff -a
      when: ansible_virtualization_type != "docker"   
      
    - name: Disable swap permanently, persist reboots
      become: true
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
        replace: '#\1\2\3swap\4'
        backup: yes
    
    - name: Adicionando APT Key do docker
      block:
        - name: Apt Key Download
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /etc/apt/keyrings/docker.asc
            checksum: sha256:1500c1f56fa9e26b9b8f42452a553675796ade0807cdce11975eb98170b3a570
    
        - name: Aadicionando repositorio do Docker
          ansible.builtin.apt_repository:
            #repo: "[deb arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.example.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            repo: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu   {{ ansible_distribution_release }} stable
            filename: /etc/apt/sources.list.d/docker
            state: present
    
    - name: Instalar o ContainerD
      become: true
      ansible.builtin.apt: 
        name: containerd.io
        update_cache: yes

    - name: Criação do diretório de configuração do ContainerD
      become: true
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Criar o arquivo de configuração
      become: true
      ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
  
    - name: Trocar o config do containerd
      become: true
      ansible.builtin.command: sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

    - name: Reiniciar ContainerD
      become: true
      ansible.builtin.service:
        name: containerd
        state: restarted

- name: Instalar o Kubeadm, Kubelet e o Kubectl
  hosts: all
  tasks:
    - name: Instalação dos pacotes dos requisitos
      become: true
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        state: present

    - name: Adicionar a chave do repositório
      become: true
      ansible.builtin.apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
        state: present
 
    - name: Adicionar o repositório
      become: true
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
        state: present

    - name: Instalar os pacotes Kubelet, Kubeadm e Kubectl
      become: true
      ansible.builtin.apt:
        name:
          - kubectl=1.28.0-00
          - kubeadm=1.28.0-00
          - kubelet=1.28.0-00
        state: present
        update_cache: yes

- name: Iniciar o Cluster Kubernetes
  hosts: control_plane
  tasks:
    - name: Comando de Inicialização
      become: true
      ansible.builtin.command: kubeadm init
      ignore_errors: true

    - name: Criação do diretório .kube  
      become: true
      ansible.builtin.file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copiar o arquivo kube config
      become: true
      ansible.builtin.copy:
        dest: /home/ubuntu/.kube/config
        src: /etc/kubernetes/admin.conf
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: '0640'

    - name: Baixar calico.yaml
      become: true
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
        dest: /home/ubuntu/calico.yaml
        mode: '0640'
    
    - name: Habilitar calico CIDR
      become: true
      ansible.builtin.command: sed -i 's/# - name:\ CALICO_IPV4POOL_CIDR/- name:\ CALICO_IPV4POOL_CIDR/g' /home/ubuntu/calico.yaml

    - name: Alterar range de IP para o utilizado na rede atual
      become: true
      ansible.builtin.command: sed -i 's/#\s*value:\s*"192\.168\.0\.0\/16"/  value:\ "172.16.0.0\/16"/g' /home/ubuntu/calico.yaml
 
    - name: Aplicar a instalação do Calico
      become: true
      ansible.builtin.command: kubectl apply -f /home/ubuntu/calico.yaml

    - name: Criar comando de Join
      become: true
      ansible.builtin.shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: Adicionar comando de join no fact
      ansible.builtin.set_fact:
        join_command: "{{ join_command_raw.stdout }}"

- name: Iniciar o Kubernetes Worker Node
  hosts: worker
  tasks:
    - name: Executar o comando de join
      become: true
      ansible.builtin.command: "{{ hostvars[groups['control_plane'][0]]['join_command'] }}"
