---
- name: Instalação e configuração do kubernetes
  hosts: all
  tasks:
    - name: Instalando os módulos do overlay e br_netfilter
      become: true
      ansible.builtin.copy:
        src: ./k8s.conf
        dest: /etc/modules-load.d/k8s.conf
        mode: '644'
      when: ansible_virtualization_type != "docker"    
      
    - name: Carregando modulo overlay
      become: true
      community.general.modprobe:
        name: overlay
        state: present
      when: ansible_virtualization_type != "docker"   

    - name: Carregando modulo br_netfilter
      become: true
      community.general.modprobe:
        name: br_netfilter
        state: present
      when: ansible_virtualization_type != "docker"     
  
    - name: Configurando os parâmetros de rede do sysctl para suporte ao Kubernetes
      become: true
      ansible.builtin.copy:
        src: ./k8s-cri.conf
        dest: /etc/sysctl.d/k8s.conf
        mode: '644'
      when: ansible_virtualization_type != "docker"   

    - name:  Recarregando configurações do kernel definidas no arquivo de configuração /etc/sysctl.conf
      become: true
      ansible.builtin.command: "sysctl --system"
      when: ansible_virtualization_type != "docker"   

    - name: Desabilitando swap para sessão corrente
      become: true
      ansible.builtin.command: swapoff -a
      when: ansible_virtualization_type != "docker"   
      
    - name: Desabilitando swap permanentemente no arquivo /etc/fstab
      become: true
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
        replace: '#\1\2\3swap\4'
        backup: yes
    
    - name: Adicionando chave do repositorio do Docker
      block:
        - name: Apt Key Download
          become: true       
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /etc/apt/keyrings/docker.asc
            checksum: sha256:1500c1f56fa9e26b9b8f42452a553675796ade0807cdce11975eb98170b3a570
    
        - name: Aadicionando repositorio do Docker
          become: true
          ansible.builtin.apt_repository:
            repo: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu   {{ ansible_distribution_release }} stable
            filename: /etc/apt/sources.list.d/docker
            state: present
    
    - name: Instalando containerd.io
      become: true
      ansible.builtin.apt: 
        name: containerd.io
        update_cache: yes

    - name: Criando diretório de configuração do containerd
      become: true
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Criando arquivo de configuração default do containerd
      become: true
      ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
  
    - name: Trocar o config do containerd
      become: true
      ansible.builtin.command: sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

    - name: Reiniciando containerd
      become: true
      ansible.builtin.service:
        name: containerd
        state: restarted

- name: Instalação das ferramentas Kubeadm, Kubelet e Kubectl
  hosts: all
  tasks:
    - name: Instalação os pré-requisitos dos pacotes
      become: true
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present

    - name: Adicionando a chave do repositório do kubernetes 1.30
      become: true
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
 
    - name: Adicionando repositório do kubernetes
      become: true
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /
        filename: /etc/apt/sources.list.d/kubernetes
        state: present

    - name: Instalando os pacotes Kubelet, Kubeadm e Kubectl
      become: true
      ansible.builtin.apt:
        name:
          - kubectl
          - kubeadm
          - kubelet
        state: present
        update_cache: yes

- name: Iniciando o cluster kubernetes
  hosts: control_plane
  tasks:
    - name: Executando kubeadm init para inicialização do cluster
      become: true
      ansible.builtin.command: kubeadm init
      ignore_errors: true

    - name: Criando diretório .kube para usuário o usuário corrente  
      become: true
      ansible.builtin.file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copiando o arquivo kube config para o usuário corrente
      become: true
      ansible.builtin.copy:
        dest: /home/ubuntu/.kube/config
        src: /etc/kubernetes/admin.conf
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: '0640'

    - name: Baixando o plugin de rede "Calico"
      become: true
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
        dest: /home/ubuntu/calico.yaml
        mode: '0640'
    
    - name: Habilitando o calico CIDR
      become: true
      ansible.builtin.command: sed -i 's/# - name:\ CALICO_IPV4POOL_CIDR/- name:\ CALICO_IPV4POOL_CIDR/g' /home/ubuntu/calico.yaml

    - name: Alterando o range de IP do calico para o utilizado na VPC 
      become: true
      ansible.builtin.command: sed -i 's/#\s*value:\s*"192\.168\.0\.0\/16"/  value:\ "172.16.0.0\/16"/g' /home/ubuntu/calico.yaml

    - name: Alterando permissão e grupo do arquivo /home/ubuntu/calico.yaml
      become: true
      ansible.builtin.file:
        path: /home/ubuntu/calico.yaml
        owner: ubuntu
        group: ubuntu
        mode: '0644'  
 
    - name: Instalando o calico no cluster
      ansible.builtin.command: kubectl apply -f /home/ubuntu/calico.yaml

    - name: Criando comando de Join para os nodes e registrando na variável "join_command_raw"
      become: true
      ansible.builtin.shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: Adicionando o comando de join no fact
      ansible.builtin.set_fact:
        join_command: "{{ join_command_raw.stdout }}"

- name: Incluindo worker node ao cluster kubernetes
  hosts: worker
  tasks:
    - name: Executar o comando de join
      become: true
      ansible.builtin.command: "{{ hostvars[groups['control_plane'][0]]['join_command'] }}"
